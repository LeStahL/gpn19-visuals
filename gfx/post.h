/* Generated with shader-compressor by NR4/Team210. */
#ifndef POST_H
#define POST_H
const char * post_frag =
"/* Endeavor by Team210 - 64k intro by Team210 at Revision 2k19\n"
" * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n"
" *\n"
" * This program is free software: you can redistribute it and/or modify\n"
" * it under the terms of the GNU General Public License as published by\n"
" * the Free Software Foundation, either version 3 of the License, or\n"
" * (at your option) any later version.\n"
" *\n"
" * This program is distributed in the hope that it will be useful,\n"
" * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
" * GNU General Public License for more details.\n"
" *\n"
" * You should have received a copy of the GNU General Public License\n"
" * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"
" */\n"
" \n"
"#version 130\n"
"\n"
"uniform float iFSAA;\n"
"uniform vec2 iResolution;\n"
"uniform float iTime;\n"
"uniform sampler2D iChannel0;\n"
"uniform int iEffect;\n"
"\n"
"uniform float iFader0;\n"
"uniform float iFader1;\n"
"uniform float iFader2;\n"
"uniform float iFader3;\n"
"uniform float iFader4;\n"
"uniform float iFader5;\n"
"uniform float iFader6;\n"
"uniform float iFader7;\n"
"\n"
"uniform float iDial0;\n"
"uniform float iDial1;\n"
"uniform float iDial2;\n"
"uniform float iDial3;\n"
"uniform float iDial4;\n"
"uniform float iDial5;\n"
"uniform float iDial6;\n"
"uniform float iDial7;\n"
"\n"
"\n"
"out vec4 gl_FragColor;\n"
"\n"
"const vec3 c = vec3(1.,0.,-1.);\n"
"const float pi = acos(-1.);\n"
"\n"
"void rand(in vec2 x, out float n)\n"
"{\n"
"    x += 400.;\n"
"    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n"
"}\n"
"\n"
"void lfnoise(in vec2 t, out float n)\n"
"{\n"
"    vec2 i = floor(t);\n"
"    t = fract(t);\n"
"    t = smoothstep(c.yy, c.xx, t);\n"
"    vec2 v1, v2;\n"
"    rand(i, v1.x);\n"
"    rand(i+c.xy, v1.y);\n"
"    rand(i+c.yx, v2.x);\n"
"    rand(i+c.xx, v2.y);\n"
"    v1 = c.zz+2.*mix(v1, v2, t.y);\n"
"    n = mix(v1.x, v1.y, t.x);\n"
"}\n"
"\n"
"void dvoronoi(in vec2 x, out float d, out vec2 z)\n"
"{\n"
"    vec2 y = floor(x);\n"
"       float ret = 1.;\n"
"    vec2 pf=c.yy, p;\n"
"    float df=10.;\n"
"    \n"
"    for(int i=-1; i<=1; i+=1)\n"
"        for(int j=-1; j<=1; j+=1)\n"
"        {\n"
"            p = y + vec2(float(i), float(j));\n"
"            float pa;\n"
"            rand(p, pa);\n"
"            p += pa;\n"
"            \n"
"            d = length(x-p);\n"
"            \n"
"            if(d < df)\n"
"            {\n"
"                df = d;\n"
"                pf = p;\n"
"            }\n"
"        }\n"
"    for(int i=-1; i<=1; i+=1)\n"
"        for(int j=-1; j<=1; j+=1)\n"
"        {\n"
"            p = y + vec2(float(i), float(j));\n"
"            float pa;\n"
"            rand(p, pa);\n"
"            p += pa;\n"
"            \n"
"            vec2 o = p - pf;\n"
"            d = length(.5*o-dot(x-pf, o)/dot(o,o)*o);\n"
"            ret = min(ret, d);\n"
"        }\n"
"    \n"
"    d = ret;\n"
"    z = pf;\n"
"}\n"
"\n"
"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n"
"{\n"
"    vec4 col = vec4(0.);\n"
"    float bound = sqrt(iFSAA)-1.;\n"
"    \n"
"    float delta = 0.;\n"
"    vec2 n;\n"
"    \n"
"    // Chromatic distortion\n"
"    if(iFader0 > 0.) \n"
"    {\n"
"        delta = mix(.0,.02,iFader0);\n"
"        rand(floor(20.*fragCoord.y/iResolution.y*c.xx-1337.*floor(12.*iTime)),n.x);\n"
"        rand(floor(20.*fragCoord.y/iResolution.y*c.xx-1337.*floor(12.*iTime)+2337.),n.y);\n"
"    }\n"
"    \n"
"    // HF noise\n"
"    if(iFader1 > 0.)\n"
"    {\n"
"        lfnoise(12.*fragCoord-iTime, n.x);\n"
"        lfnoise(12.*fragCoord-iTime-1337., n.y);\n"
"        fragCoord += mix(1.,20.,iFader1)*n;\n"
"    }\n"
"    \n"
"    // LF noise\n"
"    if(iFader2 > 0.)\n"
"    {\n"
"        lfnoise(22.*fragCoord/iResolution-3.*iTime, n.x);\n"
"        lfnoise(22.*fragCoord/iResolution-3.*iTime-1337., n.y);\n"
"        fragCoord += mix(0.,22.,iFader2)*n;\n"
"    }\n"
"    \n"
"    // Kaleidoscope\n"
"    if(iFader3 > 0.)\n"
"    {\n"
"        float a = iResolution.x/iResolution.y;\n"
"        vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0);\n"
"//         rand(floor(.33*iTime)*c.xx, n.x);\n"
"//         n.x = max(floor(12.*n.x),3.);\n"
"        n.x = floor(mix(3.,10.,iFader3));\n"
"        float phi = abs(mod(atan(uv.y, uv.x),pi/n.x)-.5*pi/n.x);\n"
"        uv = length(uv)*vec2(cos(phi), sin(phi));\n"
"        fragCoord = (uv + .5*vec2(a,1.))*iResolution.yy;\n"
"    }\n"
"    \n"
"    if(iFader4 > 0.)\n"
"    {\n"
"        float a = iResolution.x/iResolution.y;\n"
"        vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0);\n"
"        \n"
"        float dv;\n"
"        vec2 ind;\n"
"        dvoronoi(mix(1.,100.,1.-iFader4)*uv, dv, ind);\n"
"        uv = ind/mix(1.,100.,1.-iFader4);\n"
"        \n"
"        fragCoord = (uv + .5*vec2(a,1.))*iResolution.yy;\n"
"    }\n"
"    \n"
"   	for(float i = -.5*bound; i<=.5*bound; i+=1.)\n"
"        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n"
"        {\n"
"            vec3 cl = texture(iChannel0, fragCoord/iResolution.xy+delta*n+vec2(i,j)*3.0/max(bound,1.)/iResolution.xy).rgb,\n"
"                cr = texture(iChannel0, fragCoord/iResolution.xy-delta*n+vec2(i,j)*3.0/max(bound,1.)/iResolution.xy).rgb,\n"
"                cc = texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*3.0/max(bound,1.)/iResolution.xy).rgb;\n"
"            col += vec4(cl.r, cc.g, cr.b,1.);\n"
"        }\n"
"    col /= iFSAA;\n"
"    fragColor = col;\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    mainImage(gl_FragColor, gl_FragCoord.xy);\n"
"}\n"
"\n"
;
#endif
